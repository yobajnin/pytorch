testCreateAutodiffSubgraphs
graph(%0 : UNKNOWN_TYPE
      %1 : UNKNOWN_TYPE
      %2 : UNKNOWN_TYPE
      %3 : UNKNOWN_TYPE
      %4 : UNKNOWN_TYPE) {
  %5 : UNKNOWN_TYPE = mm(%1, %4)
  %6 : UNKNOWN_TYPE = mm(%0, %3)
  %7 : UNKNOWN_TYPE = add[alpha={1}](%6, %5)
  %8 : UNKNOWN_TYPE, %9 : UNKNOWN_TYPE, %10 : UNKNOWN_TYPE, %11 : UNKNOWN_TYPE = chunk[chunks=4, dim=1](%7)
  %12 : UNKNOWN_TYPE = sigmoid(%8)
  %13 : UNKNOWN_TYPE = sigmoid(%11)
  %14 : UNKNOWN_TYPE = tanh(%10)
  %15 : UNKNOWN_TYPE = sigmoid(%9)
  %21 : UNKNOWN_TYPE = GraphExecutor_0(%12, %14, %15, %2)
  %19 : UNKNOWN_TYPE = tanh(%21)
  %20 : UNKNOWN_TYPE = mul(%13, %19)
  return (%20, %21);
}
with GraphExecutor_0 = graph(%1 : UNKNOWN_TYPE
      %2 : UNKNOWN_TYPE
      %4 : UNKNOWN_TYPE
      %5 : UNKNOWN_TYPE) {
  %0 : UNKNOWN_TYPE = mul(%1, %2)
  %3 : UNKNOWN_TYPE = mul(%4, %5)
  %6 : UNKNOWN_TYPE = add[alpha={1}](%3, %0)
  return (%6);
}

testDifferentiate
graph(%0 : Float(2, 3, 4)
      %1 : Float(2, 3, 4)) {
  %2 : Float(2, 3, 4) = mul(%0, %1)
  %3 : Float(2, 3, 4) = mul(%2, %0)
  %4 : Float(2, 3, 4) = add[alpha={1}](%3, %1)
  return (%4, %2);
}
graph(%0 : Float(2, 3, 4)
      %1 : Float(2, 3, 4)
      %2 : Float(2, 3, 4)
      %3 : Float(2, 3, 4)
      %4 : Float(2, 3, 4)) {
  %5 : Float(2, 3, 4) = mul(%3, %0)
  %6 : Float(2, 3, 4) = add[alpha={1}](%4, %5)
  %7 : Float(2, 3, 4) = mul(%3, %2)
  %8 : Float(2, 3, 4) = mul(%6, %1)
  %9 : Float(2, 3, 4) = mul(%6, %0)
  %10 : Float(2, 3, 4) = add[alpha={1}](%7, %8)
  %11 : Float(2, 3, 4) = add[alpha={1}](%3, %9)
  return (%10, %11);
}

testDifferentiateWithRequiresGrad
graph(%0 : Float(2, 3, 4)
      %1 : Float(2, 3, 4)) {
  %2 : Float(2, 3, 4) = mul(%1, %1)
  %3 : Float(2, 3, 4) = add[alpha={1}](%2, %1)
  %4 : Float(2, 3, 4) = add[alpha={1}](%3, %0)
  %5 : Float(2, 3, 4) = mul(%4, %0)
  %6 : Float(2, 3, 4) = add[alpha={1}](%5, %1)
  return (%3, %6, %4);
}
graph(%0 : Float(2, 3, 4)
      %1 : Float(2, 3, 4)
      %2 : Float(2, 3, 4)
      %3 : Float(2, 3, 4)) {
  %4 : Float(2, 3, 4) = mul(%2, %0)
  %5 : Float(2, 3, 4) = add[alpha={1}](%3, %4)
  %6 : Float(2, 3, 4) = mul(%2, %1)
  %7 : Float(2, 3, 4) = add[alpha={1}](%6, %5)
  return (%7);
}

