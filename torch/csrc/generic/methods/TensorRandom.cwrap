[[
  name: randperm
  defined_if: "!IS_DISTRIBUTED"
  backends:
    - CPU
  variants:
    - function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - arg: THGenerator* generator
      default: THPDefaultGenerator->cdata
      kwarg_only: True
    - long n
]]

[[
  name: random_
  defined_if: "!IS_DISTRIBUTED"
  backends:
    - CPU
    - CUDA
  return: self
  options:
    - cname: random
      arguments:
        - THTensor* self
        - arg: THGenerator* generator
          default: THPDefaultGenerator->cdata
          kwarg_only: True
    - cname: cappedRandom
      arguments:
        - THTensor* self
        - arg: THGenerator* generator
          default: THPDefaultGenerator->cdata
          kwarg_only: True
        - long to
    - cname: clampedRandom
      arguments:
        - THTensor* self
        - arg: THGenerator* generator
          default: THPDefaultGenerator->cdata
          kwarg_only: True
        - long from
        - long to
]]

[[
  name: multinomial
  types:
    - floating_point
  backends:
    - CPU
    - CUDA
  variants:
    - method
    - function
  return: argument 0
  arguments:
    - arg: THIndexTensor* result
      output: True
    - arg: THGenerator* generator
      default: THPDefaultGenerator->cdata
      kwarg_only: True
    - THTensor* self
    - long num_samples
    - arg: bool replacement
      default: "false"
]]

[[
  name: uniform_
  types:
    - floating_point
  backends:
    - CPU
    - CUDA
  cname: uniform
  return: self
  arguments:
    - THTensor* self
    - arg: THGenerator* generator
      default: THPDefaultGenerator->cdata
      kwarg_only: True
    - arg: double from
      default: 0
    - arg: double to
      default: 1
]]

[[
  name: normal
  types:
    - floating_point
  backends:
    - CPU
    - CUDA
  return: argument 0
  variants:
    - function
  options:
    - cname: normal_means
      arguments:
        - arg: THTensor* output
          output: True
        - arg: THGenerator* generator
          default: THPDefaultGenerator->cdata
          kwarg_only: True
        - THTensor* means
        - arg: double std
          default: 1
    - cname: normal_stddevs
      arguments:
        - arg: THTensor* output
          output: True
        - arg: THGenerator* generator
          default: THPDefaultGenerator->cdata
          kwarg_only: True
        - arg: double mean
          default: 0
        - THTensor* std
    - cname: normal_means_stddevs
      arguments:
        - arg: THTensor* output
          output: True
        - arg: THGenerator* generator
          default: THPDefaultGenerator->cdata
          kwarg_only: True
        - THTensor* means
        - THTensor* std
]]

[[
  name: normal_
  types:
    - floating_point
  backends:
    - CPU
    - CUDA
  cname: normal
  return: self
  arguments:
    - THTensor* self
    - arg: THGenerator* generator
      default: THPDefaultGenerator->cdata
      kwarg_only: True
    - arg: double mean
      default: 0
    - arg: double std
      default: 1
]]

[[
  name: cauchy_
  types:
    - floating_point
  backends:
    - CPU
    - CUDA
  cname: cauchy
  return: self
  arguments:
    - THTensor* self
    - arg: THGenerator* generator
      default: THPDefaultGenerator->cdata
      kwarg_only: True
    - arg: double median
      default: 0
    - arg: double sigma
      default: 1
]]

[[
  name: logNormal_
  cname: logNormal
  python_name: log_normal_
  types:
    - floating_point
  backends:
    - CPU
    - CUDA
  return: self
  arguments:
    - THTensor* self
    - arg: THGenerator* generator
      default: THPDefaultGenerator->cdata
      kwarg_only: True
    - arg: double mean
      default: 1
    - arg: double std
      default: 2
]]

[[
  name: exponential_
  types:
    - floating_point
  backends:
    - CPU
    - CUDA
  cname: exponential
  return: self
  arguments:
    - THTensor* self
    - arg: THGenerator* generator
      default: THPDefaultGenerator->cdata
      kwarg_only: True
    - arg: double lambd
      default: 1
]]

[[
  name: rand
  types:
    - floating_point
  backends:
    - CPU
    - CUDA
  variants:
    - function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - arg: THGenerator* generator
      default: THPDefaultGenerator->cdata
      kwarg_only: True
    - arg: THSize* size
      long_args: True
]]

[[
  name: randn
  types:
    - floating_point
  backends:
    - CPU
    - CUDA
  variants:
    - function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - arg: THGenerator* generator
      default: THPDefaultGenerator->cdata
      kwarg_only: True
    - arg: THSize* size
      long_args: True
]]

[[
  name: geometric_
  defined_if: "!IS_DISTRIBUTED"
  backends:
    - CPU
    - CUDA
  cname: geometric
  return: self
  arguments:
    - THTensor* self
    - arg: THGenerator* generator
      default: THPDefaultGenerator->cdata
      kwarg_only: True
    - double p
]]

#define THDoubleTensor_BERNOULLI_TENSOR THDoubleTensor_bernoulli_DoubleTensor
#define THFloatTensor_BERNOULLI_TENSOR THFloatTensor_bernoulli_FloatTensor
#define THCudaDoubleTensor_BERNOULLI_TENSOR THCudaDoubleTensor_bernoulli_DoubleTensor
#define THCudaTensor_BERNOULLI_TENSOR THCudaTensor_bernoulli_FloatTensor

[[
  name: bernoulli
  types:
    - Float
    - Double
  backends:
    - CPU
    - CUDA
  return: argument 0
  variants:
    - method
    - function
  before_call:
    CPU: THTensor_(resizeAs)(LIBRARY_STATE ((THPTensor*)$arg0)->cdata, ((THPTensor*)$arg2)->cdata);
    CUDA: THTensor_(resizeAs)(LIBRARY_STATE ((THPTensor*)$arg0)->cdata, ((THPTensor*)$arg1)->cdata);
  cname: BERNOULLI_TENSOR
  arguments:
    - arg: THTensor* output
      output: True
      resize: self
    - arg: THGenerator* generator
      default: THPDefaultGenerator->cdata
      kwarg_only: True
    - THTensor* self
]]

#undef THDoubleTensor_BERNOULLI_TENSOR
#undef THFloatTensor_BERNOULLI_TENSOR
#undef THCudaDoubleTensor_BERNOULLI_TENSOR
#undef THCudaTensor_BERNOULLI_TENSOR

[[
  name: bernoulli_
  defined_if: "!IS_DISTRIBUTED"
  backends:
    - CPU
    - CUDA
  return: self
  options:
    - cname: bernoulli
      arguments:
        - THTensor* self
        - arg: THGenerator* generator
          default: THPDefaultGenerator->cdata
          kwarg_only: True
        - arg: double p
          default: 0.5
    - cname: bernoulli_FloatTensor
      arguments:
        - THTensor* self
        - arg: THGenerator* generator
          default: THPDefaultGenerator->cdata
          kwarg_only: True
        - BackendFloatTensor* float_p
    - cname: bernoulli_DoubleTensor
      arguments:
        - THTensor* self
        - arg: THGenerator* generator
          default: THPDefaultGenerator->cdata
          kwarg_only: True
        - BackendDoubleTensor* float_p
]]
